<?php
// $Id$

/**
 * @file
 * Defines features and functions common to the commerce delivery module.
 *
 * TODO:
 *  - admin pages to manage order deliveries (and assign items)
 *  - delivery reference field with own formatters (instead of number_integer)
 */

/**
 * Implements hook_permission().
 */
function commerce_delivery_permission() {
  $permissions = array(
    'commerce_delivery_administer_deliveries' => array(
      'title' => t('Adminster deliveries'),
      'description' => t('Allows users to administer deliveries.'),
      'restrict access' => TRUE,
    ),
    'commerce_delivery_manage_deliveries' => array(
      'title' => t('Manage deliveries'),
      'description' => t('Allows users to manage deliveries.'),
      'restrict access' => TRUE,
    ),
    'commerce_delivery_rules_access' => array(
      'title' => t('Adminster deliveries rules'),
      'description' => t('Allows users to adminster deliveries rules.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_entity_info().
 */
function commerce_delivery_entity_info() {
  $return = array(
    'commerce_delivery' => array(
      'label' => t('Delivery'), 
      'controller class' => 'DeliveryEntityController', 
      'base table' => 'commerce_delivery', 
      'uri callback' => 'commerce_delivery_uri', 
      'fieldable' => TRUE, 
      'token_type' => 'delivery',
      'entity keys' => array(
        'id' => 'delivery_id', 
        'bundle' => 'type',
        'label' => 'delivery_id', 
      ), 
      'bundles' => array(
        'commerce_delivery' => array(
          'label' => 'Delivery',
          'admin' => array(
            'path' => 'admin/commerce/config/delivery',
            'access arguments' => array('administer deliveries'),
          ),
        ),
      ), 
      'view modes' => array(
        'full' => array(
          'label' => t('Full Delivery'), 
          'custom settings' => FALSE,
        ), 
        'teaser' => array(
          'label' => t('Teaser'), 
          'custom settings' => TRUE,
        ), 
      ),
      'load_hook' => 'commerce_delivery_load',
      'creation callback' => 'commerce_delivery_new',
      'save callback' => 'commerce_delivery_save',
      'deletion callback' => 'commerce_delivery_delete',
    ),
  );
  return $return;
}

/**
 * Callback returning delivery url.
 */
function commerce_delivery_uri($delivery){
  return array( 'path' => 'delivery/' . $delivery->id);
}

/**
 * Callback creating a new delivery.
 */
function commerce_delivery_new($values = array()) {
  return entity_get_controller('commerce_delivery')->create('commerce_delivery'); 
}
 
/**
 * Saves a delivery.
 *
 * @param $delivery
 *   The full delivery object to save. If $delivery->delivery_id is empty, a new delivery
 *     will be created. 
 *
 * @return
 *   The saved delivery object.
 */
function commerce_delivery_save($delivery) {
  return entity_get_controller('commerce_delivery')->save($delivery);
}

/**
 * Callback for getting order properties.
 * @see commerce_delivery_entity_property_info()
 */
function commerce_delivery_get_properties($order, array $options, $name) {
  switch ($name) {
    case 'owner':
      return $delivery->uid;
    case 'view-url':
      return url('delivery/' . $delivery->delivery_id, $options);
    case 'admin-url':
      return url('admin/commerce/delivery/' . $delivery->delivery_id, $options);
    case 'edit-url':
      return url('admin/commerce/delivery/' . $delivery->delivery_id . '/edit', $options);
    case 'state':
      $delivery_status = commerce_delivery_status_load($delivery->status);
      return $delivery_status['state'];
  }
}

/**
 * Loads a delivery by ID.
 */
function commerce_delivery_load($pid = NULL, $reset = FALSE){
  $pids = (isset ($pid) ? array($pid) : array());
  $delivery = commerce_delivery_load_multiple($pids, $reset);
  return $delivery ? reset ($delivery) : FALSE;
}

/**
 * Loads multiple deliveries by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $delivery_ids
 *   An array of delivery IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_delivery} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal delivery loading cache.
 *
 * @return
 *   An array of delivery objects indexed by delivery_id.
 */
function commerce_delivery_load_multiple($pids = array(), $conditions = array(), $reset = FALSE){
  return entity_load('commerce_delivery', $pids, $conditions, $reset);
}

/**
 * Implements hook_menu().
 */
function commerce_delivery_menu(){
  $items['admin/commerce/deliveries/add'] = array(
    'title' => 'Create a delivery ',
    'description' => 'Create a new delivery for the specified order.',
    'page callback' => 'commerce_delivery_add',
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => 10,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/deliveries/add/%order_id'] = array(
    'title' => 'Create a delivery ',
    'description' => 'Create a new delivery for the specified order.',
    'page callback' => 'commerce_delivery_add',
    'page arguments' => array(4),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => 10,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/config/delivery'] = array(
    'title' => 'Delivery settings',
    'description' => 'Configure general delivery settings, fields, and displays.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_delivery_settings_form'),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/config/delivery/settings'] = array(
    'title' => 'Settings',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/commerce/deliveries/do/%commerce_delivery/view'] = array(
    'title' => 'View',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(4),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/deliveries/do/%commerce_delivery/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(4),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => -5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/deliveries/do/%commerce_delivery/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array(4),
    'access arguments' => array('commerce_delivery_administer_deliveries'),
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implements hook_field_extra_fields().
 */
function commerce_delivery_field_extra_fields() {
  $return = array();
  $return['commerce_delivery']['commerce_delivery'] = array(
    'form' => array(
      'delivery_id' => array(
        'label' => t('ID'),
        'description' => t('Delivery ID'),
         'weight' => 1,
      ),
       'order_id' => array(
        'label' => t('OID'),
        'description' => t('Order ID'),
         'weight' => 1,
      ),
       'status' => array(
        'label' => t('Status'),
        'description' => t('Delivery status'),
         'weight' => 1,
      ),
    ),
    'display' => array(
      'delivery_id' => array(
        'label' => t('ID'),
        'description' => t('Delivery ID'),
         'weight' => 1,
      ),
       'order_id' => array(
        'label' => t('OID'),
        'description' => t('Order ID'),
         'weight' => 1,
      ),
       'status' => array(
        'label' => t('Status'),
        'description' => t('Delivery status'),
         'weight' => 1,
      ),
    ),
  );
  return $return;
}

function commerce_delivery_add($order_id = NULL) {
// TODO: check order_id
if ($order_id == '') {
  return t('Required Order ID missing.');
}
  $delivery = (object) array(
    'id' => '',
    'type' => 'delivery',
    'order_id' => $order_id,
  );
  return drupal_get_form('commerce_delivery_add_form', $delivery);
}

/**
 * Helper function that return status values as options.
 *
 * @return
 *   An array of status labels indexed by their id.
 */
function commerce_delivery_get_status() {
  $options_array = variable_get('commerce_delivery_status_options');
  $options_array = explode("\n",$options_array);
  foreach($options_array as $option) {
    $option = explode('|', $option);
    $options[$option[0]] = t($option[1]); 
  }
  return $options;
}

/**
 * Returns the human readable title of a delivery status.
 *
 * @param $id
 *   id of the status
 *
 * @return
 *   string containing the human readable title for the specified state. If a state
 *     is specified that does not exist, this function returns FALSE.
 */
function commerce_delivery_status_get_title($id = NULL) {
  $states = commerce_delivery_get_status();

  // Return a state title if specified and it exists.
  if (isset($states[$id])) {
      return check_plain($states[$id]);
    }
  return FALSE;
}

function commerce_delivery_add_form($form, &$form_state, $delivery) {
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => commerce_delivery_get_status(),
    '#default_value' => variable_get('commerce_delivery_default_status', ''),
    '#required' => TRUE,
  );
  $form['order_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $delivery->order_id,
  );
  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => 'commerce_delivery',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  field_attach_form('commerce_delivery', $delivery, $form, $form_state);
  return $form;
}

function commerce_delivery_add_form_validate($form, &$form_state) {
  $delivery_submission = (object) $form_state['values'];
  field_attach_form_validate('commerce_delivery', $delivery_submission, $form, $form_state);
}

function commerce_delivery_add_form_submit($form, &$form_state) {
  $delivery_submission = (object) $form_state['values'];
  field_attach_submit('commerce_delivery', $delivery_submission, $form, $form_state);
  $delivery = commerce_delivery_save($delivery_submission);
  // verifico se ci sono consegne non assegnate
  $query = new EntityFieldQuery;
  $line_items = $query
  ->entityCondition('entity_type', 'commerce_line_item')
 // ->fieldCondition('delivery_ref', 'value', 1, '<')
  ->propertyCondition('order_id', $delivery->order_id, '=')
  ->execute();
  // assegno eventuali consegne non assegnate
  foreach ($line_items as $type => $values) {
      $items = entity_load($type, array_keys($values));
      foreach ($items as $item) {
        $wrapper = entity_metadata_wrapper($type, $item);
        $wrapper->delivery_ref = $delivery->delivery_id;
        commerce_line_item_save($item);
      }
  }
  $form_state['redirect'] = "admin/commerce/deliveries";
}

/**
 * Settings form
 */
function commerce_delivery_settings_form($form, &$form_state) {
  $form['commerce_delivery_status_options'] = array(
    '#type' => 'textarea',
    '#title' => t('Delivery status options'),
    '#description' => t('Supply status options. Format is "id|label". Take note that lower id get priority when assigning items to random deliveries.'),
    '#default_value' => variable_get('commerce_delivery_status_options', '0|new
1|pending
2|delivered
3|on hold
4|cancelled'),
  );
  $form['commerce_delivery_default_status'] = array(
    '#type' => 'select',
    '#title' => t('Delivery default status'),
    '#description' => t('Select the default status assigned to a new delivery.'),
    '#options' => commerce_delivery_get_status(),
    '#default_value' => variable_get('commerce_delivery_default_status', ''),
  );
  $form['commerce_delivery_active_status'] = array(
    '#type' => 'select',
    '#title' => t('Active deliveries statuses'),
    '#description' => t('Select in which statuses items can be assigned to a delivery.'),
    '#options' => commerce_delivery_get_status(),
    '#default_value' => variable_get('commerce_delivery_active_status', ''),
    '#multiple' => TRUE,
  );
  // Check if a shippable field has been defined
  $query = db_query('SELECT DISTINCT f.id, f.field_name 
                            FROM {field_config} f RIGHT JOIN {field_config_instance} i ON f.id = i.field_id 
                            WHERE f.type = :type and i.deleted = 0', array(':type' => 'list_boolean'));
  if ($query->rowCount() ) { // select one
    $form['commerce_delivery_shippable_field'] = array(
      '#type' => 'select',
      '#title' => t('Shippable item field'),
      '#description' => t('Select the boolean field identifying shippable skus.'),
      '#options' => $query->fetchAllKeyed(),
      '#default_value' => variable_get('commerce_delivery_shippable_field', ''),
    );
  } else {  // no field exists. ask to add one.
    $message = t('No boolean fields available. Please add at least one to a !product to identify shippable skus.',
                    array( '!product' => l('product type','admin/commerce/products/types')));
    drupal_set_message($message, 'warning');
    $form['commerce_delivery_shippable_field'] = array(
      '#type' => 'item',
      '#title' => t('Shippable item field'),
      '#description' => $message,
    );
  }
  $form['commerce_delivery_help_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Delivery creation help text'),
    '#description' => t('Supply an optional help message to be displayed above the delivery form.'),
    '#default_value' => variable_get('commerce_delivery_help_text', ''),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_views_api().
 */
function commerce_delivery_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'commerce_delivery') . '/includes',
  );
}

/**
 * Return deliveries by Order ID
 *
 * @param $order_id
 *   The order ID. 
 *
 * @param $limit
 *   'active' for retrieving only deliveries with active status
 *   'all' (default) for everything 
 *
 * @return
 *   Array of deliveries ID.
 */
function commerce_delivery_get_deliveries($order_id, $limit = 'all') {
  if ($limit == 'active') {
    $active_status = variable_get('commerce_delivery_active_status', '');
  }
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'commerce_delivery')
        ->propertyCondition('order_id', $order_id);
  if ($limit == 'active') {
    $query->propertyCondition('status', $active_status);
  }
  $deliveries = $query->propertyOrderBy('status')
        ->execute();
  return $deliveries;
}

/**
 * Callback that returns delivery_ref allowed values
 */
function commerce_delivery_ref_allowed_values($item){
  return array(0,3,4);
}

/**
 * Callback that returns delivery_ref default values
 */
function commerce_delivery_ref_default_value($type,$line_item,$f,$i,$lang){
  return array(array('value' => 0));
}

/**
 * TODO: use or delete this!
 */
function commerce_delivery_page_view($delivery, $view_mode = 'full'){
  $delivery->content = array();
  
  $delivery->content += t('Welcome to the administration page for your deliveries!');

  // Build fields content.
  field_attach_prepare_view('delivery', array($delivery->id => $delivery), $view_mode);
  entity_prepare_view('delivery', array($delivery->id => $delivery));
  $delivery->content += field_attach_view('delivery', $delivery, $view_mode);

  return $delivery->content;
}


